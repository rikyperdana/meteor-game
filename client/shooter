# Urusan variables ----------------------------------------------------------------------------
bullets = null
sprite = null
cursors = null
bulletTime = 0

# Urusan Preload ------------------------------------------------------------------------------
preload = ->
	game.load.image 'space', 'shooter/deep-space.jpg'
	game.load.image 'bullet', 'shooter/bullets.png'
	game.load.image 'ship', 'shooter/ship.png'

# Urusan Create -------------------------------------------------------------------------------
create = ->
	game.renderer.clearBeforeRender = false
	game.renderer.roundPixels = true

	game.physics.startSystem Phaser.Physics.ARCADE

	game.add.tileSprite 0, 0, game.width, game.height, 'space'

	bullets = game.add.group()
	bullets.enableBody = true
	bullets.physicsBodyType = Phaser.Physics.ARCADE

	bullets.createMultiple 40, 'bullet'
	bullets.setAll 'anchor.x', 0.5
	bullets.setAll 'anchor.y', 0.5

	sprite = game.add.sprite 300, 300, 'ship'
	sprite.anchor.set 0.5

	game.physics.enable sprite, Phaser.Physics.ARCADE

	sprite.body.drag.set 100
	sprite.body.maxVelocity.set 200

	cursors = game.input.keyboard.createCursorKeys()
	game.input.keyboard.addKeyCapture [Phaser.Keyboard.SPACEBAR]


# Urusan Update -------------------------------------------------------------------------------
update = ->
	if cursors.up.isDown
		game.physics.arcade.accelerationFromRotation sprite.rotation, 200, sprite.body.acceleration
	else
		sprite.body.acceleration.set 0

	if cursors.left.isDown
		sprite.body.angularVelocity = -300
	else if cursors.right.isDown
		sprite.body.angularVelocity = 300
	else
		sprite.body.angularVelocity = 0

	if game.input.keyboard.isDown Phaser.Keyboard.SPACEBAR
		fireBullet()

	screenWrap sprite
	bullets.forEachExists screenWrap, this

# Urusan Fungsi -------------------------------------------------------------------------------
fireBullet = ->
	if game.time.now > bulletTime
		bullet = bullets.getFirstExists false
		if bullet
			bullet.reset sprite.body.x + 16, sprite.body.y + 16
			bullet.lifespan = 2000
			bullet.rotation = sprite.rotation
			game.physics.arcade.velocityFromRotation sprite.rotation, 400, bullet.body.velocity
			bulletTime = game.time.now + 50

screenWrap = ->
	if sprite.x < 0
		sprite.x = game.width
	else if sprite.x > game.width
		sprite.x = 0

	if sprite.y < 0
		sprite.y = game.height
	else if sprite.y > game.height
		sprite.y = 0

# Urusan Render -------------------------------------------------------------------------------
render = ->

# Game Instance -------------------------------------------------------------------------------
@game = new Phaser.Game 1890, 980, Phaser.AUTO, 'container',
	preload: preload, create: create, update: update, render: render
